class Matrix: 
    def _init_(self, data): 
        self.data = data 
 
    def _str_(self): 
        return '\n'.join([' '.join(map(str, row)) for row in self.data]) 
 
    def _add_(self, other): 
        if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): 
            raise ValueError("Матрицы должны быть одного размера для сложения.") 
         
        result_data = [] 
        for i in range(len(self.data)): 
            row = [self.data[i][j] + other.data[i][j] for j in range(len(self.data[0]))] 
            result_data.append(row) 
         
        return Matrix(result_data) 
 
    def _sub_(self, other): 
        if len(self.data) != len(other.data) or len(self.data[0]) != len(other.data[0]): 
            raise ValueError("Матрицы должны быть одного размера для вычитания.") 
         
        result_data = [] 
        for i in range(len(self.data)): 
            row = [self.data[i][j] - other.data[i][j] for j in range(len(self.data[0]))] 
            result_data.append(row) 
         
        return Matrix(result_data) 
 
    def _mul_(self, other): 
        if len(self.data[0]) != len(other.data): 
            raise ValueError("Количество столбцов первой матрицы должно быть равно количеству строк второй матрицы для умножения.") 
         
        result_data = [] 
        for i in range(len(self.data)): 
            row = [] 
            for j in range(len(other.data[0])): 
                element = sum(self.data[i][k] * other.data[k][j] for k in range(len(self.data[0]))) 
                row.append(element) 
            result_data.append(row) 
 
        return Matrix(result_data) 
 
    def transpose(self): 
        result_data = [] 
        for j in range(len(self.data[0])): 
            row = [self.data[i][j] for i in range(len(self.data))] 
            result_data.append(row) 
 
        return Matrix(result_data)


# Создаем две матрицы 
matrix1 = Matrix([[1, 2], [3, 4]]) 
matrix2 = Matrix([[5, 6], [7, 8]]) 
 
# Тестируем сложение матриц 
result_add = matrix1 + matrix2 
print("Сложение матриц:") 
print(result_add) 
 
# Тестируем вычитание матриц 
result_sub = matrix1 - matrix2 
print("Вычитание матриц:") 
print(result_sub) 
 
# Тестируем умножение матриц 
result_mul = matrix1 * matrix2 
print("Умножение матриц:") 
print(result_mul) 
 
# Тестируем транспонирование матрицы 
result_transpose = matrix1.transpose() 
print("Транспонирование матрицы:") 
print(result_transpose)

TrainSystem
class Wagon {
    private int capacity;

    public Wagon(int capacity) {
        this.capacity = capacity;
    }

    public int getCapacity() {
        return capacity;
    }
}

class PassengerWagon extends Wagon {
    private int numPassengers;

    public PassengerWagon(int capacity, int numPassengers) {
        super(capacity);
        this.numPassengers = numPassengers;
    }

    public int getNumPassengers() {
        return numPassengers;
    }
}

class FreightWagon extends Wagon {
    private int cargoWeight;

    public FreightWagon(int capacity, int cargoWeight) {
        super(capacity);
        this.cargoWeight = cargoWeight;
    }

    public int getCargoWeight() {
        return cargoWeight;
    }
}

class Locomotive {
    private int power;

    public Locomotive(int power) {
        this.power = power;
    }

    public int getPower() {
        return power;
    }
}

public class Train {
    private List<Wagon> wagons = new ArrayList<>();
    private List<Locomotive> locomotives = new ArrayList<>();

    public void addWagon(Wagon wagon) {
        wagons.add(wagon);
    }

    public void addLocomotive(Locomotive locomotive) {
        locomotives.add(locomotive);
    }

    public int calculateTotalCapacity() {
        int totalCapacity = 0;
        for (Wagon wagon : wagons) {
            totalCapacity += wagon.getCapacity();
        }
        return totalCapacity;
    }

    public static void main(String[] args) {
        Train train = new Train();

        PassengerWagon passengerWagon = new PassengerWagon(50, 40);
        FreightWagon freightWagon = new FreightWagon(100, 2000);
        Locomotive locomotive = new Locomotive(500);

        train.addLocomotive(locomotive);
        train.addWagon(passengerWagon);
        train.addWagon(freightWagon);

        int totalCapacity = train.calculateTotalCapacity();
        System.out.println("Total capacity of the train: " + totalCapacity);
    }
}


public class Main {
    public static void main(String[] args) {
        CompanyManager companyManager = new CompanyManager();
        companyManager.run();
    }
}

// Класс сотрудника
public class Employee {
    private int id;
    private String name;
    private double salary;

    public Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    // Геттеры и сеттеры
      public String toString() {
        return "Employee{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", salary=" + salary +
                '}';
    }
}

// Класс отдела
public class Department {
    private String name;
    private List<Employee> employees;

    public Department(String name) {
        this.name = name;
        this.employees = new ArrayList<>();
    }

    // Методы для добавления и получения сотрудников

  
    public String toString() {
        return "Department{" +
                "name='" + name + '\'' +
                ", employees=" + employees +
                '}';
    }
}

// Класс компании
public class Company {
    private String name;
    private List<Department> departments;

    public Company(String name) {
        this.name = name;
        this.departments = new ArrayList<>();
    }

    // Методы для добавления и получения отделов

    
    public String toString() {
        return "Company{" +
                "name='" + name + '\'' +
                ", departments=" + departments +
                '}';
    }
}

// Класс управления компанией
public class CompanyManager {
    private Company company;

    public CompanyManager() {
        // Инициализация компании и загрузка данных из базы данных
    }

    public void run() {
        // Выполнение операций с использованием объекта компании
    }
}

// Класс Animal
class Animal {
    String name;
    double price;

    public Animal(String name, double price) {
        this.name = name;
        this.price = price;
    }
}

// Создание класса Fish, наследующего от Animal
class Fish extends Animal {
    public Fish(String name, double price) {
        super(name, price);
    }
}

// Создание класса Reptile, наследующего от Animal
class Reptile extends Animal {
    public Reptile(String name, double price) {
        super(name, price);
    }
}

// Создание класса Aquarium, содержащего список животных
class Aquarium {
    List<Animal> animals = new ArrayList<>();

    // Добавление животного в аквариум
    public void addAnimal(Animal animal) {
        animals.add(animal);
    }

    // Расчет общей стоимости всех животных в аквариуме
    public double calculateTotalPrice() {
        double totalPrice = 0;
        for (Animal animal : animals) {
            totalPrice += animal.price;
        }
        return totalPrice;
    }
}

// Создание класса для демонстрации использования
public class Main {
    public static void main(String[] args) {
        // Создание аквариума
        Aquarium aquarium = new Aquarium();

        // Инициализация объектов рыб и рептилий
        Fish goldfish = new Fish("Золотая рыбка", 10.0);
        Fish bettaFish = new Fish("Бетта", 15.0);
        Reptile turtle = new Reptile("Черепаха", 25.0);

        // Добавление животных в аквариум
        aquarium.addAnimal(goldfish);
        aquarium.addAnimal(bettaFish);
        aquarium.addAnimal(turtle);

        // Расчет и вывод общей стоимости
        double totalPrice = aquarium.calculateTotalPrice();
        System.out.println("Общая стоимость животных в аквариуме: $" + totalPrice);
    }
}
